{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardarray.js","Components/Searchbox.js","Components/Scroll.js","robots.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","username","email","className","alt","src","Cardarray","robots","map","user","i","key","name","searchBox","onsearch","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","children","App","onSearchChange","event","setState","searchField","target","value","state","this","changedarray","filter","robot","toLowerCase","includes","length","Searchbox","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCNSC,EAXF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAGC,EAAoB,EAApBA,SAASC,EAAW,EAAXA,MAExB,OACE,yBAAKC,UAAU,uDACX,yBAAKC,IAAM,OAAOC,IAAG,+BAA0BL,EAA1B,mBACrB,4BAAKC,GACL,2BAAIC,KCOCI,EAXG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAChB,OACA,6BACKA,EAAOC,KAAI,SAACC,EAAKC,GAAN,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIS,EAAKT,GAAIY,KAAMH,EAAKG,KAAMX,SAAUQ,EAAKR,SAAUC,MAAOO,EAAKP,aCQ1EW,EAbG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChB,OACI,yBAAKX,UAAU,OACX,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCCRI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,QAAUC,OAAO,oBACrDJ,EAAMK,WC0DJjB,EA/DA,CACb,CACEP,GAAI,EACJY,KAAM,gBACNX,SAAU,OACVC,MAAO,qBAET,CACEF,GAAI,EACJY,KAAM,eACNX,SAAU,YACVC,MAAO,qBAET,CACEF,GAAI,EACJY,KAAM,mBACNX,SAAU,WACVC,MAAO,sBAET,CACEF,GAAI,EACJY,KAAM,mBACNX,SAAU,WACVC,MAAO,6BAET,CACEF,GAAI,EACJY,KAAM,mBACNX,SAAU,SACVC,MAAO,4BAET,CACEF,GAAI,EACJY,KAAM,uBACNX,SAAU,mBACVC,MAAO,2BAET,CACEF,GAAI,EACJY,KAAM,kBACNX,SAAU,eACVC,MAAO,0BAET,CACEF,GAAI,EACJY,KAAM,2BACNX,SAAU,gBACVC,MAAO,wBAET,CACEF,GAAI,EACJY,KAAM,kBACNX,SAAU,WACVC,MAAO,2BAET,CACEF,GAAI,GACJY,KAAM,qBACNX,SAAU,iBACVC,MAAO,2BClBIuB,G,kBAjCX,aAAc,IAAD,8BACb,+CAOAC,eAAiB,SAACC,GAClB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAPxC,EAAKC,MAAQ,CACTzB,OAAOA,EACPsB,YAAY,IAJH,E,sEAYJ,IAAD,EAC2BI,KAAKD,MAA7BzB,EADH,EACGA,OAASsB,EADZ,EACYA,YACVK,EAAe3B,EAAO4B,QAAO,SAAAC,GAC/B,OAAOA,EAAMnC,SAASoC,cAAcC,SAAST,EAAYQ,kBAGzD,OAAQ9B,EAAOgC,OAGtB,yBAAKpC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAACqC,EAAD,CAAW1B,SAAUmB,KAAKP,iBAC1B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWnB,OAAQ2B,MANhB,wBAAI/B,UAAU,MAAd,iB,GApBMsC,IAAMC,YCAxBC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,SP2H/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cf35ab7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nconst Card = ({ id,username,email}) => {\r\n   // OR const { id,username,email} = props;\r\n    return (\r\n      <div className=\"tc grow bg-light-green dib br3 pa3 ma2 bw2 shadow-3\">\r\n          <img alt = 'icon' src={`https://robohash.org/${id}?size=250x250`}/>\r\n          <h3>{username}</h3>\r\n          <p>{email}</p>\r\n      </div>\r\n    );\r\n    }\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst Cardarray = ({robots}) => {\r\n    return(\r\n    <div>\r\n        {robots.map((user,i) => \r\n        <Card key={i} id={user.id} name={user.name} username={user.username} email={user.email}/>\r\n        )\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Cardarray;","import React from 'react';\r\n\r\nconst searchBox = ({onsearch}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' \r\n             placeholder='Search friends'\r\n             onChange={onsearch} \r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default searchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height:'800px' , border:'2px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n\nexport default robots;","import React from 'react';\r\nimport Cardarray from '../Components/Cardarray';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport robots from '../robots';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n    super();\r\n    this.state = {\r\n        robots:robots,\r\n        searchField:''\r\n    }\r\n    }\r\n\r\n    onSearchChange = (event) => { //using this syntax  cause this is used for class but not input\r\n    this.setState({searchField:event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const {robots , searchField} = this.state;\r\n        const changedarray = robots.filter(robot => {\r\n            return robot.username.toLowerCase().includes(searchField.toLowerCase());\r\n            });\r\n            \r\n            return !robots.length ?\r\n            <h1 className='tc'>Loading..</h1> :\r\n     (\r\n     <div className='tc'> \r\n         <h1 className='f1'>Robofriends</h1>\r\n         <Searchbox onsearch={this.onSearchChange}/>\r\n         <Scroll> \r\n         <Cardarray robots={changedarray}/>\r\n         </Scroll>\r\n     </div>\r\n     );\r\n    }            \r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './Containers/App';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}