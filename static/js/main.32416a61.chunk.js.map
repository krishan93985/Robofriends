{"version":3,"sources":["reducers.js","serviceWorker.js","Components/Counter.js","Components/Header.js","Components/Card.js","Components/Cardarray.js","Components/Searchbox.js","Components/Scroll.js","Containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Counter","length","Header","memo","style","fontSize","maxWidth","Card","id","username","email","className","alt","src","display","Cardarray","map","user","i","key","name","SearchBox","onsearch","aria-label","type","placeholder","onChange","Scroll","props","overflowY","height","border","children","App","this","fetchRobots","onSearchChange","changedarray","filter","robot","toLowerCase","includes","Searchbox","React","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","mode","headers","response","json","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kPAEMA,EAAmB,CACrBC,YAAY,IAaVC,EAAqB,CACvBC,WAAU,EACVC,OAAO,GACPC,MAAM,I,gBCPJC,G,YAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAzB,GACLqB,QAAQrB,MAAM,4CAA6CA,M,oCCvFlD0B,EAPC,SAAC,GAAc,IAAb3B,EAAY,EAAZA,OAEd,OACI,yCAAeA,EAAO4B,SCWfC,EATAC,gBAAK,YAAe,IAAb9B,EAAY,EAAZA,OAClB,OACI,6BACA,wBAAI+B,MAAO,CAACC,SAAS,SAAUC,SAAS,SAAxC,eACA,kBAAC,EAAD,CAASjC,OAAQA,QCCVkC,EAXF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAGC,EAAoB,EAApBA,SAASC,EAAW,EAAXA,MAExB,OACE,yBAAKC,UAAU,uDACX,yBAAKC,IAAM,OAAOC,IAAG,+BAA0BL,EAA1B,iBAA6CJ,MAAO,CAACU,QAAQ,QAAQR,SAAS,UACnG,4BAAKG,GACL,2BAAIC,KCOCK,EAXG,SAAC,GAAc,IAAb1C,EAAY,EAAZA,OAChB,OACA,6BACKA,EAAO2C,KAAI,SAACC,EAAKC,GAAN,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIS,EAAKT,GAAIY,KAAMH,EAAKG,KAAMX,SAAUQ,EAAKR,SAAUC,MAAOO,EAAKP,aCS1EW,EAdG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChB,OACI,yBAAKX,UAAU,OACX,2BACCY,aAAW,iBACXZ,UAAU,mCACVa,KAAK,SACLC,YAAY,iBACZC,SAAUJ,MCARK,EARA,SAACC,GACZ,OACI,yBAAKxB,MAAO,CAACyB,UAAW,SAAUC,OAAO,QAAUC,OAAO,oBACrDH,EAAMI,WCoBbC,G,wLAEFC,KAAKN,MAAMO,gB,+BAGH,IAAD,EACoDD,KAAKN,MAAxD1D,EADD,EACCA,YAAakE,EADd,EACcA,eAAgB/D,EAD9B,EAC8BA,OAAQD,EADtC,EACsCA,UAEnCiE,EAAehE,EAAOiE,QAAO,SAACC,GACpC,OAAOA,EAAM9B,SAAS+B,cAAcC,SAASvE,EAAYsE,kBAG7D,OACE,yBAAK7B,UAAU,MACb,kBAAC,EAAD,CAAQtC,OAAQgE,IAChB,kBAACK,EAAD,CAAWpB,SAAUc,IACrB,kBAAC,EAAD,KACGhE,EACC,wBAAIuC,UAAU,MAAd,cAEA,kBAAC,EAAD,CAAWtC,OAAQgE,U,GApBbM,IAAMC,YA4BTC,eA5CS,SAACpD,GACvB,MAAO,CACLvB,YAAauB,EAAMqD,aAAa5E,YAChCE,UAAWqB,EAAMsD,cAAc3E,UAC/BC,OAAQoB,EAAMsD,cAAc1E,OAC5BC,MAAOmB,EAAMsD,cAAczE,UAIJ,SAAC0E,GAC1B,MAAO,CACLZ,eAAgB,SAACa,GAAD,OAAWD,ECfU,CACrCxB,KCN8B,qBDO9B0B,QDamDD,EAAME,OAAOC,SAChEjB,YAAa,kBAAMa,GCXY,SAACA,GACpCA,EAAS,CAACxB,KCV2B,0BDWrC6B,MAAM,6CAA6C,CAC/CC,KAAK,OACLC,QAAQ,CACJ,8BAA8B,iDAGrCpE,MAAK,SAAAqE,GAAQ,OAAIA,EAASC,UAC1BtE,MAAK,SAAAd,GAAM,OAAI2E,EAAS,CAACxB,KCjBW,wBDiBgB0B,QAAQ7E,OAC5D0B,OAAM,SAAAzB,GAAK,OAAI0E,EAAS,CAACxB,KCjBU,uBDiBgB0B,QAAQ5E,cDiC7CuE,CAA6CZ,GGzCtDyB,EAASC,yBACTC,EAAcC,YAAgB,CAACf,aXPT,WAAyC,IAAxCrD,EAAuC,uDAAjCxB,EAAmB6F,EAAc,uDAAP,GACzD,OAAOA,EAAOtC,MAEd,IUT8B,qBVU1B,OAAOuC,OAAOC,OAAO,GAAGvE,EAAM,CAACvB,YAAY4F,EAAOZ,UACtD,QACI,OAAOzD,IWCmCsD,cXSrB,WAAyC,IAAxCtD,EAAuC,uDAAjCtB,EAAmB2F,EAAc,uDAAP,GAC1D,OAAOA,EAAOtC,MAEV,IUxB6B,wBVyBzB,OAAOuC,OAAOC,OAAO,GAAGvE,EAAM,CAACrB,WAAU,IAC7C,IUzB6B,wBV0BzB,OAAO2F,OAAOC,OAAO,GAAGvE,EAAM,CAACrB,WAAU,EAAMC,OAAOyF,EAAOZ,UACjE,IU1B4B,uBV2BxB,OAAOa,OAAOC,OAAO,GAAGvE,EAAM,CAACnB,MAAMwF,EAAOZ,UAChD,QACI,OAAOzD,MWlBbwE,EAAQC,YAAYN,EAAYO,YAAgBC,IAAgBV,IAEtEW,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACjB,kBAAC,EAAD,OACaM,SAASC,eAAe,SVGlC,SAAkBzF,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyF,IAAIC,eAAwBjG,OAAOC,SAASiG,MACpDC,SAAWnG,OAAOC,SAASkG,OAIvC,OAGFnG,OAAOoG,iBAAiB,QAAQ,WAC9B,IAAM/F,EAAK,UAAM4F,eAAN,sBAEPnG,IAgEV,SAAiCO,EAAOC,GAEtCsE,MAAMvE,EAAO,CACXyE,QAAS,CAAE,iBAAkB,YAE5BpE,MAAK,SAAAqE,GAEJ,IAAMsB,EAActB,EAASD,QAAQwB,IAAI,gBAEnB,MAApBvB,EAASwB,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjG,UAAUC,cAAciG,MAAM/F,MAAK,SAAAC,GACjCA,EAAa+F,aAAahG,MAAK,WAC7BV,OAAOC,SAAS0G,eAKpBvG,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyF,CAAwBvG,EAAOC,GAI/BC,UAAUC,cAAciG,MAAM/F,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OU1B/BE,K","file":"static/js/main.32416a61.chunk.js","sourcesContent":["import { CHANGE_INPUT_FIELD, SEARCH_ROBOTS_PENDING, SEARCH_ROBOTS_SUCCESS, SEARCH_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch={\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action={}) => {\r\n    switch(action.type)\r\n    {\r\n    case CHANGE_INPUT_FIELD :\r\n        return Object.assign({},state,{searchField:action.payload})\r\n    default:\r\n        return state;    \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending:true,\r\n    robots:[],\r\n    error:''\r\n} \r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) => {\r\n    switch(action.type)\r\n    {\r\n        case SEARCH_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n        case SEARCH_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{isPending:false,robots:action.payload})\r\n        case SEARCH_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Counter = ({robots}) => {\r\n\r\n    return (\r\n        <button>Count:{robots.length}</button>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React, { memo } from 'react';\r\nimport Counter from './Counter';\r\n\r\n//wrapping with memo does shallow props comparisons\r\n//for within state comparison use useMemo (see docs)\r\n//use shouldComponentUpdate for class based components\r\n//to avoid shouldCom...Update use PureComponents in react\r\nconst Header = memo(({robots}) => {\r\n    return (\r\n        <div>\r\n        <h1 style={{fontSize:\"2.9rem\", maxWidth:\"100%\"}}>Robofriends</h1>\r\n        <Counter robots={robots} />\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Header;","import React from 'react';\r\nconst Card = ({ id,username,email}) => {\r\n   // OR const { id,username,email} = props;\r\n    return (\r\n      <div className=\"tc grow bg-light-green dib br3 pa3 ma2 bw2 shadow-3\">\r\n          <img alt = 'icon' src={`https://robohash.org/${id}?size=220x220`} style={{display:\"block\",maxWidth:\"100%\"}} />\r\n          <h2>{username}</h2>\r\n          <p>{email}</p>\r\n      </div>\r\n    );\r\n    }\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst Cardarray = ({robots}) => {\r\n    return(\r\n    <div>\r\n        {robots.map((user,i) => \r\n        <Card key={i} id={user.id} name={user.name} username={user.username} email={user.email}/>\r\n        )\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Cardarray;","import React from 'react';\r\n\r\nconst SearchBox = ({onsearch}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n             aria-label='Search friends'\r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' \r\n             placeholder='Search friends'\r\n             onChange={onsearch} \r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height:'600px' , border:'2px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport Header from \"../Components/Header\";\r\nimport Cardarray from \"../Components/Cardarray\";\r\nimport Searchbox from \"../Components/Searchbox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport \"./App.css\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    isPending: state.requestRobots.isPending,\r\n    robots: state.requestRobots.robots,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    fetchRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    \r\n        const changedarray = robots.filter((robot) => {\r\n        return robot.username.toLowerCase().includes(searchField.toLowerCase());\r\n      });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <Header robots={changedarray} />\r\n        <Searchbox onsearch={onSearchChange} />\r\n        <Scroll>\r\n          {isPending ? (\r\n            <h1 className=\"tc\">Loading...</h1>\r\n          ) : (\r\n            <Cardarray robots={changedarray} />\r\n          )}\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_INPUT_FIELD,\r\n    SEARCH_ROBOTS_PENDING,\r\n    SEARCH_ROBOTS_SUCCESS,\r\n    SEARCH_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_INPUT_FIELD,\r\n    payload:text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\ndispatch({type:SEARCH_ROBOTS_PENDING});\r\nfetch('https://jsonplaceholder.typicode.com/users',{\r\n    mode:'cors',\r\n    headers:{\r\n        'Access-Control-Allow-Origin':'https://krishan93985.github.io/robofriends/'\r\n    }\r\n})\r\n.then(response => response.json())\r\n.then(robots => dispatch({type:SEARCH_ROBOTS_SUCCESS,payload:robots}))\r\n.catch(error => dispatch({type:SEARCH_ROBOTS_FAILED,payload:error}))\r\n}\r\n","export const CHANGE_INPUT_FIELD = 'CHANGE_INPUT_FIELD';\r\nexport const SEARCH_ROBOTS_PENDING = 'SEARCH_ROBOTS_PENDING';\r\nexport const SEARCH_ROBOTS_SUCCESS = 'SEARCH_ROBOTS_SUCCESS';\r\nexport const SEARCH_ROBOTS_FAILED = 'SEARCH_ROBOTS_FAILED';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport { searchRobots, requestRobots } from './reducers'; \r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './Containers/App';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}