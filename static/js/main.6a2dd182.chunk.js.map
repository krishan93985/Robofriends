{"version":3,"sources":["reducers.js","serviceWorker.js","Components/Counter.js","Components/Header.js","Components/Card.js","Components/Cardarray.js","Components/Searchbox.js","Components/Scroll.js","Containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Counter","useState","count","setCount","onClick","Header","memo","className","Card","id","username","email","alt","src","Cardarray","map","user","i","key","name","SearchBox","onsearch","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","children","App","this","fetchRobots","onSearchChange","changedarray","filter","robot","toLowerCase","includes","Searchbox","React","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","mode","headers","response","json","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6a2dd182.chunk.js","sourcesContent":["import { CHANGE_INPUT_FIELD, SEARCH_ROBOTS_PENDING, SEARCH_ROBOTS_SUCCESS, SEARCH_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch={\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action={}) => {\r\n    switch(action.type)\r\n    {\r\n    case CHANGE_INPUT_FIELD :\r\n        return Object.assign({},state,{searchField:action.payload})\r\n    default:\r\n        return state;    \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending:true,\r\n    robots:[],\r\n    error:''\r\n} \r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) => {\r\n    switch(action.type)\r\n    {\r\n        case SEARCH_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n        case SEARCH_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{isPending:false,robots:action.payload})\r\n        case SEARCH_ROBOTS_FAILED:\r\n            return Object.assign({},state,{isPending:false,robots:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nconst Counter = () => {\r\n    const [count,setCount] = useState(0);\r\n\r\n    console.log('Counter')\r\n    return (\r\n        <button onClick={() => setCount(count+1)}>Count:{count}</button>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React, { memo } from 'react';\r\nimport Counter from './Counter';\r\n\r\n//wrapping with memo does shallow props comparisons\r\n//for within state comparison use useMemo (see docs)\r\n//use shouldComponentUpdate for class based components\r\n//to avoid shouldCom...Update use PureComponents in react\r\nconst Header = memo(() => {\r\n    console.log('Header')\r\n    return (\r\n        <div>\r\n        <h1 className='f1'>Robofriends</h1>\r\n        <Counter />\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Header;","import React from 'react';\r\nconst Card = ({ id,username,email}) => {\r\n   // OR const { id,username,email} = props;\r\n    return (\r\n      <div className=\"tc grow bg-light-green dib br3 pa3 ma2 bw2 shadow-3\">\r\n          <img alt = 'icon' src={`https://robohash.org/${id}?size=250x250`}/>\r\n          <h3>{username}</h3>\r\n          <p>{email}</p>\r\n      </div>\r\n    );\r\n    }\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst Cardarray = ({robots}) => {\r\n    return(\r\n    <div>\r\n        {robots.map((user,i) => \r\n        <Card key={i} id={user.id} name={user.name} username={user.username} email={user.email}/>\r\n        )\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Cardarray;","import React from 'react';\r\n\r\nconst SearchBox = ({onsearch}) => {\r\n    console.log('searchBox')\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n             className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' \r\n             placeholder='Search friends'\r\n             onChange={onsearch} \r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height:'800px' , border:'2px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport Header from '../Components/Header';\r\nimport Cardarray from '../Components/Cardarray';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField,requestRobots } from '../actions';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField:state.searchRobots.searchField,\r\n        isPending:state.requestRobots.isPending,\r\n        robots:state.requestRobots.robots,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\r\n        fetchRobots:() => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount(){\r\n        this.props.fetchRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField,onSearchChange,robots,isPending} = this.props;\r\n        const changedarray = robots.filter(robot => {\r\n            return robot.username.toLowerCase().includes(searchField.toLowerCase());\r\n            });\r\n            \r\n            return(\r\n     <div className='tc'> \r\n         <Header />\r\n         <Searchbox onsearch={onSearchChange}/>\r\n         <Scroll> \r\n         {\r\n             isPending ?\r\n             <h1 className='tc'>Loading...</h1> :\r\n             <Cardarray robots={changedarray}/>\r\n         }\r\n         </Scroll>\r\n     </div>\r\n     );\r\n    }            \r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_INPUT_FIELD,\r\n    SEARCH_ROBOTS_PENDING,\r\n    SEARCH_ROBOTS_SUCCESS,\r\n    SEARCH_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_INPUT_FIELD,\r\n    payload:text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\ndispatch({type:SEARCH_ROBOTS_PENDING});\r\nfetch('https://jsonplaceholder.typicode.com/users',{\r\n    mode:'cors',\r\n    headers:{\r\n        'Access-Control-Allow-Origin':'https://krishan93985.github.io/robofriends/'\r\n    }\r\n})\r\n.then(response => response.json())\r\n.then(robots => dispatch({type:SEARCH_ROBOTS_SUCCESS,payload:robots}))\r\n.catch(error => dispatch({type:SEARCH_ROBOTS_FAILED,payload:error}))\r\n}\r\n","export const CHANGE_INPUT_FIELD = 'CHANGE_INPUT_FIELD';\r\nexport const SEARCH_ROBOTS_PENDING = 'SEARCH_ROBOTS_PENDING';\r\nexport const SEARCH_ROBOTS_SUCCESS = 'SEARCH_ROBOTS_SUCCESS';\r\nexport const SEARCH_ROBOTS_FAILED = 'SEARCH_ROBOTS_FAILED';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport { searchRobots, requestRobots } from './reducers'; \r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './Containers/App';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}